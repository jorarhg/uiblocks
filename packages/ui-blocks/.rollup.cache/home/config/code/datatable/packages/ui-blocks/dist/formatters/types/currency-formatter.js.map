{"version":3,"file":"currency-formatter.js","sourceRoot":"","sources":["../../../src/formatters/types/currency-formatter.tsx"],"names":[],"mappings":";AAGA,MAAM,CAAC,MAAM,iBAAiB,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE;;IACvE,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IACxC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAAE,OAAO,EAAE,OAAO,EAAE,eAAM,SAAS,EAAC,uBAAuB,kBAAS,EAAE,CAAA;IACvI,MAAM,QAAQ,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,KAAK,CAAA;IAC3C,MAAM,QAAQ,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,mCAAI,CAAC,CAAA;IACvC,MAAM,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,OAAO,CAAA;IACzC,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAC,EAAE,KAAK,EAAC,UAAU,EAAE,QAAQ,EAAE,qBAAqB,EAAC,QAAQ,EAAE,qBAAqB,EAAC,QAAQ,EAAE,CAAC,CAAA;QAC9I,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;QACtD,OAAO,EAAE,OAAO,EAAE,eAAM,SAAS,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,YAAG,cAAc,GAAQ,EAAE,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,CAAA;IACzG,CAAC;IAAC,WAAM,CAAC;QACP,OAAO,EAAE,OAAO,EAAE,gBAAM,SAAS,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,aAAG,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAG,QAAQ,IAAQ,EAAE,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,CAAA;IACrI,CAAC;AACH,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport { FormatterFunction } from '../../internal/types/formatters'\n\nexport const CurrencyFormatter: FormatterFunction = ({ value, field }) => {\n  const options = field.formatter?.options\n  if (value === null || value === undefined || isNaN(Number(value))) return { content: <span className=\"text-muted-foreground\">-</span> }\n  const currency = options?.currency || 'EUR'\n  const decimals = options?.decimals ?? 2\n  const locale = options?.locale || 'es-ES'\n  try {\n    const formatter = new Intl.NumberFormat(locale,{ style:'currency', currency, minimumFractionDigits:decimals, maximumFractionDigits:decimals })\n    const formattedValue = formatter.format(Number(value))\n    return { content: <span className={options?.className}>{formattedValue}</span>, style: options?.style }\n  } catch {\n    return { content: <span className={options?.className}>{Number(value).toFixed(decimals)} {currency}</span>, style: options?.style }\n  }\n}\n"]}