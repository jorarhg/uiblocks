{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/formatters/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport { FormatterContext, FormatterResult, ColumnFormatter, ConditionalFormat } from '../internal/types/formatters'\n\nexport function applyTemplate(template: string, value: any, record?: any): string {\n  if (!template) return String(value ?? '')\n  return template\n    .replace(/\\{value\\}/g, String(value ?? ''))\n    .replace(/\\{record\\.(\\w+)\\}/g, (_, prop) => String(record?.[prop] ?? ''))\n}\n\nexport function createCustomFormatter(\n  render: (context: FormatterContext) => React.ReactNode\n) {\n  return (context: FormatterContext) => ({ content: render(context) })\n}\n\nexport function applyConditionalFormatting(\n  context: FormatterContext,\n  baseResult: FormatterResult,\n  formatCell: (ctx: FormatterContext) => FormatterResult\n): FormatterResult {\n  const { field, value, record } = context\n  const conditionalFormats: ConditionalFormat[] = field.formatter?.options?.conditionalFormatting || field.conditionalFormatting || []\n  for (const format of conditionalFormats) {\n    let met = false\n    if (typeof format.condition === 'function') met = format.condition(value, record)\n    else if (typeof format.condition === 'string') {\n      try { met = evaluateCondition(format.condition, value, record) } catch { continue }\n    }\n    if (met) {\n      if (format.formatter) {\n        const newCtx: FormatterContext = { ...context, field: { ...context.field, formatter: format.formatter as ColumnFormatter } }\n        return formatCell(newCtx)\n      }\n      return { ...baseResult, className: combineClassNames(baseResult.className, format.className), style: { ...baseResult.style, ...format.style } }\n    }\n  }\n  return baseResult\n}\n\nfunction evaluateCondition(condition: string, value: any, record: any): boolean {\n  const safe = condition\n    .replace(/\\bvalue\\b/g, JSON.stringify(value))\n    .replace(/\\brecord\\.(\\w+)\\b/g, (_, p) => JSON.stringify(record?.[p]))\n  const allowed = /^[\\d\\s\\+\\-\\*\\/\\(\\)\\>\\<\\=\\!\\&\\|\\.\\\"\\'\\w]+$/\n  if (!allowed.test(safe)) throw new Error('Unsafe condition')\n  // eslint-disable-next-line no-new-func\n  return new Function('return ' + safe)()\n}\n\nfunction combineClassNames(...classes: (string | undefined)[]) {\n  return classes.filter(Boolean).join(' ')\n}"]}