{"version":3,"file":"badge-formatter.jsx","sourceRoot":"","sources":["../../../src/formatters/types/badge-formatter.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAA;AAC3C,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,cAAc,CAAA;AAEvH,MAAM,WAAW,GAAG;IAClB,QAAQ,EAAE,UAAU;IACpB,eAAe,EAAE,gBAAgB;IACjC,OAAO,EAAE,KAAK;IACd,cAAc,EAAE,WAAW;IAC3B,UAAU,EAAE,OAAO;IACnB,cAAc,EAAE,WAAW;IAC3B,MAAM,EAAE,IAAI;IACZ,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,GAAG;CACX,CAAA;AAED,MAAM,CAAC,MAAM,cAAc,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;;IAC5E,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IACxC,MAAM,WAAW,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,0CAAG,KAAK,CAAC,CAAA;IAC9C,MAAM,OAAO,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAA,IAAI,SAAS,CAAA;IACrE,IAAI,WAAW,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,KAAI,KAAK,CAAA;IAC7C,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;QAAE,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IACnF,MAAM,OAAO,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,CAAA;IAClD,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,OAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IACvF,MAAM,iBAAiB,GAAG,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACzH,MAAM,aAAa,mCAAQ,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,GAAK,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,CAAE,CAAA;IAClE,OAAO;QACL,OAAO,EAAE,CACP,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAc,CAAC,CAAC,SAAS,CAAC,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CACjF;QAAA,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,KAAI,EAAE,EAAE,CAAC,EAAG,CAC9F;QAAA,CAAC,WAAW,CACd;MAAA,EAAE,KAAK,CAAC,CACT;KACF,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport { FormatterFunction } from '../../internal/types/formatters'\nimport { Badge } from '../../ui/badge'\nimport { applyTemplate } from '../registry'\nimport { CircleIcon, CircleDashedIcon, Clock, CheckCircle, XCircle, AlertCircle, Star, Heart, Zap } from 'lucide-react'\n\nconst BADGE_ICONS = {\n  'circle': CircleIcon,\n  'circle-dashed': CircleDashedIcon,\n  'clock': Clock,\n  'check-circle': CheckCircle,\n  'x-circle': XCircle,\n  'alert-circle': AlertCircle,\n  'star': Star,\n  'heart': Heart,\n  'zap': Zap\n}\n\nexport const BadgeFormatter: FormatterFunction = ({ value, field, record }) => {\n  const options = field.formatter?.options\n  const valueConfig = options?.valueMap?.[value]\n  const variant = valueConfig?.variant || options?.variant || 'default'\n  let displayText = valueConfig?.label || value\n  if (options?.template) displayText = applyTemplate(options.template, value, record)\n  const iconKey = valueConfig?.icon || options?.icon\n  const IconComponent = iconKey ? BADGE_ICONS[iconKey as keyof typeof BADGE_ICONS] : null\n  const combinedClassName = [options?.badgeClassName, valueConfig?.className, options?.className].filter(Boolean).join(' ')\n  const combinedStyle = { ...options?.style, ...valueConfig?.style }\n  return {\n    content: (\n      <Badge variant={variant as any} className={combinedClassName} style={combinedStyle}>\n        {IconComponent && <IconComponent className={`mr-1 h-3 w-3 ${options?.iconClassName || ''}`} />}\n        {displayText}\n      </Badge>\n    )\n  }\n}\n"]}