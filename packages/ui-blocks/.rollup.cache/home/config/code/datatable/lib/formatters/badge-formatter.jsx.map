{"version":3,"file":"badge-formatter.jsx","sourceRoot":"","sources":["badge-formatter.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAA;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AACvC,OAAO,EACL,UAAU,EACV,gBAAgB,EAChB,KAAK,EACL,WAAW,EACX,OAAO,EACP,WAAW,EACX,IAAI,EACJ,KAAK,EACL,GAAG,EACJ,MAAM,cAAc,CAAA;AAErB,6CAA6C;AAC7C,MAAM,WAAW,GAAG;IAClB,QAAQ,EAAE,UAAU;IACpB,eAAe,EAAE,gBAAgB;IACjC,OAAO,EAAE,KAAK;IACd,cAAc,EAAE,WAAW;IAC3B,UAAU,EAAE,OAAO;IACnB,cAAc,EAAE,WAAW;IAC3B,MAAM,EAAE,IAAI;IACZ,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,GAAG;CACX,CAAA;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;;IAC5E,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IAExC,kDAAkD;IAClD,MAAM,WAAW,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,0CAAG,KAAK,CAAC,CAAA;IAE9C,mCAAmC;IACnC,MAAM,OAAO,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAA,IAAI,SAAS,CAAA;IAErE,gCAAgC;IAChC,IAAI,WAAW,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,KAAI,KAAK,CAAA;IAC7C,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,CAAC;QACtB,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IAC9D,CAAC;IAED,sBAAsB;IACtB,MAAM,OAAO,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,CAAA;IAClD,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,OAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAEvF,sBAAsB;IACtB,MAAM,iBAAiB,GAAG;QACxB,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc;QACvB,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS;QACtB,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS;KACnB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAE3B,mBAAmB;IACnB,MAAM,aAAa,mCACd,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,GACd,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,CACtB,CAAA;IAED,OAAO;QACL,OAAO,EAAE,CACP,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,OAAc,CAAC,CACxB,SAAS,CAAC,CAAC,iBAAiB,CAAC,CAC7B,KAAK,CAAC,CAAC,aAAa,CAAC,CAErB;QAAA,CAAC,aAAa,IAAI,CAChB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,KAAI,EAAE,EAAE,CAAC,EAAG,CAC7E,CACD;QAAA,CAAC,WAAW,CACd;MAAA,EAAE,KAAK,CAAC,CACT;KACF,CAAA;AACH,CAAC,CAAA","sourcesContent":["\nimport React from 'react'\nimport { FormatterFunction } from '@/types/formatters'\nimport { Badge } from '@/components/ui/badge'\nimport { applyTemplate } from './index'\nimport { \n  CircleIcon, \n  CircleDashedIcon, \n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Star,\n  Heart,\n  Zap\n} from 'lucide-react'\n\n// Registry de iconos disponibles para badges\nconst BADGE_ICONS = {\n  'circle': CircleIcon,\n  'circle-dashed': CircleDashedIcon,\n  'clock': Clock,\n  'check-circle': CheckCircle,\n  'x-circle': XCircle,\n  'alert-circle': AlertCircle,\n  'star': Star,\n  'heart': Heart,\n  'zap': Zap\n}\n\n/**\n * Formatter para badges con soporte completo de configuración\n */\nexport const BadgeFormatter: FormatterFunction = ({ value, field, record }) => {\n  const options = field.formatter?.options\n  \n  // Buscar configuración específica para este valor\n  const valueConfig = options?.valueMap?.[value]\n  \n  // Determinar la variante del badge\n  const variant = valueConfig?.variant || options?.variant || 'default'\n  \n  // Determinar el texto a mostrar\n  let displayText = valueConfig?.label || value\n  if (options?.template) {\n    displayText = applyTemplate(options.template, value, record)\n  }\n  \n  // Determinar el icono\n  const iconKey = valueConfig?.icon || options?.icon\n  const IconComponent = iconKey ? BADGE_ICONS[iconKey as keyof typeof BADGE_ICONS] : null\n  \n  // Combinar clases CSS\n  const combinedClassName = [\n    options?.badgeClassName,\n    valueConfig?.className,\n    options?.className\n  ].filter(Boolean).join(' ')\n  \n  // Combinar estilos\n  const combinedStyle = {\n    ...options?.style,\n    ...valueConfig?.style\n  }\n  \n  return {\n    content: (\n      <Badge \n        variant={variant as any} \n        className={combinedClassName}\n        style={combinedStyle}\n      >\n        {IconComponent && (\n          <IconComponent className={`mr-1 h-3 w-3 ${options?.iconClassName || ''}`} />\n        )}\n        {displayText}\n      </Badge>\n    )\n  }\n}\n"]}