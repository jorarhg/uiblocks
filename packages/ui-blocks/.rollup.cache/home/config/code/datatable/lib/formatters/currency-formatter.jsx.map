{"version":3,"file":"currency-formatter.jsx","sourceRoot":"","sources":["currency-formatter.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAA;AAGzB;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE;;IACvE,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IAExC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAClE,OAAO;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC;SAC1D,CAAA;IACH,CAAC;IAED,MAAM,QAAQ,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,KAAK,CAAA;IAC3C,MAAM,QAAQ,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,mCAAI,CAAC,CAAA;IACvC,MAAM,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,OAAO,CAAA;IAEzC,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAC9C,KAAK,EAAE,UAAU;YACjB,QAAQ,EAAE,QAAQ;YAClB,qBAAqB,EAAE,QAAQ;YAC/B,qBAAqB,EAAE,QAAQ;SAChC,CAAC,CAAA;QAEF,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;QAEtD,OAAO;YACL,OAAO,EAAE,CACP,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAClC;UAAA,CAAC,cAAc,CACjB;QAAA,EAAE,IAAI,CAAC,CACR;YACD,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;SACtB,CAAA;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,uDAAuD;QACvD,OAAO;YACL,OAAO,EAAE,CACP,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAClC;UAAA,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAE,CAAA,CAAC,QAAQ,CAC7C;QAAA,EAAE,IAAI,CAAC,CACR;YACD,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;SACtB,CAAA;IACH,CAAC;AACH,CAAC,CAAA","sourcesContent":["\nimport React from 'react'\nimport { FormatterFunction } from '@/types/formatters'\n\n/**\n * Formatter para monedas con soporte internacional\n */\nexport const CurrencyFormatter: FormatterFunction = ({ value, field }) => {\n  const options = field.formatter?.options\n  \n  if (value === null || value === undefined || isNaN(Number(value))) {\n    return {\n      content: <span className=\"text-muted-foreground\">-</span>\n    }\n  }\n  \n  const currency = options?.currency || 'EUR'\n  const decimals = options?.decimals ?? 2\n  const locale = options?.locale || 'es-ES'\n  \n  try {\n    const formatter = new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    })\n    \n    const formattedValue = formatter.format(Number(value))\n    \n    return {\n      content: (\n        <span className={options?.className}>\n          {formattedValue}\n        </span>\n      ),\n      style: options?.style\n    }\n  } catch (error) {\n    // Fallback si hay error con la configuraci√≥n de moneda\n    return {\n      content: (\n        <span className={options?.className}>\n          {Number(value).toFixed(decimals)} {currency}\n        </span>\n      ),\n      style: options?.style\n    }\n  }\n}\n"]}