#!/usr/bin/env node

/**
 * Script simple de validaci√≥n de la integraci√≥n h√≠brida
 */

console.log('üöÄ Validando integraci√≥n del sistema h√≠brido...\n')

// Test 1: Verificar que los archivos existen
const fs = require('fs')
const path = require('path')

const requiredFiles = [
  'components/dynamic-toolbar/utils/enhanced-hybrid-filter-engine.ts',
  'components/dynamic-toolbar/hooks/use-dynamic-filters.ts',
  'components/dynamic-toolbar/data-table-with-dynamic-toolbar.tsx',
  'components/dynamic-toolbar/dynamic-data-table-toolbar.tsx',
  'components/dynamic-toolbar/types/filter-config.ts'
]

console.log('üìÅ Verificando archivos requeridos...')
let allFilesExist = true

for (const file of requiredFiles) {
  const filePath = path.join(__dirname, file)
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`)
  } else {
    console.log(`‚ùå ${file} - NO ENCONTRADO`)
    allFilesExist = false
  }
}

if (!allFilesExist) {
  console.log('\n‚ùå Faltan archivos requeridos')
  process.exit(1)
}

// Test 2: Verificar que los exports principales est√°n disponibles
console.log('\nüì¶ Verificando exports y sintaxis...')

try {
  // Verificar sintaxis de archivos TypeScript b√°sicos
  const { execSync } = require('child_process')
  
  console.log('‚úÖ Verificando sintaxis TypeScript...')
  execSync('npx tsc --noEmit --skipLibCheck components/dynamic-toolbar/utils/enhanced-hybrid-filter-engine.ts', {
    cwd: __dirname,
    stdio: 'pipe'
  })
  console.log('‚úÖ EnhancedHybridFilterEngine - Sintaxis OK')
  
  execSync('npx tsc --noEmit --skipLibCheck components/dynamic-toolbar/hooks/use-dynamic-filters.ts', {
    cwd: __dirname,
    stdio: 'pipe'
  })
  console.log('‚úÖ useDynamicFilters - Sintaxis OK')
  
} catch (error) {
  console.log(`‚ùå Error de sintaxis TypeScript: ${error.message}`)
  process.exit(1)
}

// Test 3: Verificar estructura de configuraci√≥n
console.log('\n‚öôÔ∏è  Verificando estructura de configuraci√≥n...')

const configContent = fs.readFileSync('components/dynamic-toolbar/hooks/use-dynamic-filters.ts', 'utf8')

if (configContent.includes('DynamicFiltersConfig')) {
  console.log('‚úÖ DynamicFiltersConfig interface encontrada')
} else {
  console.log('‚ùå DynamicFiltersConfig interface no encontrada')
  process.exit(1)
}

if (configContent.includes('useEnhancedEngine')) {
  console.log('‚úÖ Feature flag useEnhancedEngine encontrado')
} else {
  console.log('‚ùå Feature flag useEnhancedEngine no encontrado')
  process.exit(1)
}

// Test 4: Verificar package.json scripts
console.log('\nüìã Verificando scripts npm...')

const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))

const requiredScripts = ['validate:filters', 'test:filters', 'demo:filters']
for (const script of requiredScripts) {
  if (packageJson.scripts && packageJson.scripts[script]) {
    console.log(`‚úÖ Script '${script}' configurado`)
  } else {
    console.log(`‚ö†Ô∏è  Script '${script}' no encontrado en package.json`)
  }
}

console.log('\nüéâ ¬°VALIDACI√ìN EXITOSA!')
console.log('   El sistema h√≠brido est√° correctamente integrado')
console.log('   y listo para usar.\n')

console.log('üìö Pr√≥ximos pasos:')
console.log('   1. Revisa la documentaci√≥n en: docs/INTEGRATION_GUIDE.md')
console.log('   2. Prueba los ejemplos en: examples/enhanced-integration-demo.tsx')
console.log('   3. Activa feature flags gradualmente')
console.log('   4. Ejecuta tests espec√≠ficos con: npm run test:filters\n')

console.log('üîß Uso b√°sico:')
console.log(`const filterConfig = {
  useEnhancedEngine: true,
  analysisContext: {
    domain: 'ecommerce',
    dataSource: 'api',
    expectedCardinality: 'medium'
  },
  performanceMode: 'balanced'
}

<DataTableWithDynamicToolbar
  data={data}
  columns={columns}
  filterConfig={filterConfig}
/>`)

console.log('\n‚ú® Integraci√≥n completada exitosamente!')
