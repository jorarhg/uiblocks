{"version":3,"file":"percentage-formatter.jsx","sourceRoot":"","sources":["percentage-formatter.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAA;AAGzB;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE;;IACzE,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IAExC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAClE,OAAO;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC;SAC1D,CAAA;IACH,CAAC;IAED,MAAM,QAAQ,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,mCAAI,CAAC,CAAA;IACvC,MAAM,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,GAAG,CAAA;IAErC,+EAA+E;IAC/E,IAAI,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IAEnC,iEAAiE;IACjE,IAAI,eAAe,IAAI,CAAC,IAAI,eAAe,IAAI,CAAC,EAAE,CAAC;QACjD,eAAe,IAAI,GAAG,CAAA;IACxB,CAAC;IAED,MAAM,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAExD,OAAO;QACL,OAAO,EAAE,CACP,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAClC;QAAA,CAAC,cAAc,CAAC,CAAC,MAAM,CACzB;MAAA,EAAE,IAAI,CAAC,CACR;QACD,KAAK,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK;KACtB,CAAA;AACH,CAAC,CAAA","sourcesContent":["\nimport React from 'react'\nimport { FormatterFunction } from '@/types/formatters'\n\n/**\n * Formatter para porcentajes con configuración de decimales\n */\nexport const PercentageFormatter: FormatterFunction = ({ value, field }) => {\n  const options = field.formatter?.options\n  \n  if (value === null || value === undefined || isNaN(Number(value))) {\n    return {\n      content: <span className=\"text-muted-foreground\">-</span>\n    }\n  }\n  \n  const decimals = options?.decimals ?? 1\n  const suffix = options?.suffix || '%'\n  \n  // Convertir a porcentaje (asumir que el valor viene como decimal: 0.25 -> 25%)\n  let percentageValue = Number(value)\n  \n  // Si el valor es menor que 1, asumir que está en formato decimal\n  if (percentageValue <= 1 && percentageValue >= 0) {\n    percentageValue *= 100\n  }\n  \n  const formattedValue = percentageValue.toFixed(decimals)\n  \n  return {\n    content: (\n      <span className={options?.className}>\n        {formattedValue}{suffix}\n      </span>\n    ),\n    style: options?.style\n  }\n}\n"]}