{"version":3,"file":"link-formatter.jsx","sourceRoot":"","sources":["link-formatter.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAEvC;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAsB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;;IAC3E,MAAM,OAAO,GAAG,MAAA,KAAK,CAAC,SAAS,0CAAE,OAAO,CAAA;IAExC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC;SAC1D,CAAA;IACH,CAAC;IAED,qBAAqB;IACrB,IAAI,IAAY,CAAA;IAChB,IAAI,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,KAAK,UAAU,EAAE,CAAC;QACxC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IACpC,CAAC;SAAM,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAE,CAAC;QACzB,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IACnD,CAAC;SAAM,CAAC;QACN,0DAA0D;QAC1D,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC;IAED,gCAAgC;IAChC,IAAI,WAAW,GAAG,KAAK,CAAA;IACvB,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,CAAC;QACtB,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IAC9D,CAAC;IAED,oBAAoB;IACpB,MAAM,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,OAAO,CAAA;IAEzC,OAAO;QACL,OAAO,EAAE,CACP,CAAC,CAAC,CACA,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,GAAG,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,SAAS,CAAC,CAC7D,SAAS,CAAC,CAAC,mBAAmB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,KAAI,eAAe,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,KAAI,EAAE,EAAE,CAAC,CACtG,KAAK,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAEtB;QAAA,CAAC,WAAW,CACd;MAAA,EAAE,CAAC,CAAC,CACL;KACF,CAAA;AACH,CAAC,CAAA","sourcesContent":["\nimport React from 'react'\nimport { FormatterFunction } from '@/types/formatters'\nimport { applyTemplate } from './index'\n\n/**\n * Formatter para enlaces con configuraciÃ³n flexible\n */\nexport const LinkFormatter: FormatterFunction = ({ value, field, record }) => {\n  const options = field.formatter?.options\n  \n  if (!value) {\n    return {\n      content: <span className=\"text-muted-foreground\">-</span>\n    }\n  }\n  \n  // Determinar el href\n  let href: string\n  if (typeof options?.href === 'function') {\n    href = options.href(value, record)\n  } else if (options?.href) {\n    href = applyTemplate(options.href, value, record)\n  } else {\n    // Si no se especifica href, asumir que el value es la URL\n    href = String(value)\n  }\n  \n  // Determinar el texto a mostrar\n  let displayText = value\n  if (options?.template) {\n    displayText = applyTemplate(options.template, value, record)\n  }\n  \n  // Determinar target\n  const target = options?.target || '_self'\n  \n  return {\n    content: (\n      <a\n        href={href}\n        target={target}\n        rel={target === '_blank' ? 'noopener noreferrer' : undefined}\n        className={`hover:underline ${options?.linkClassName || 'text-blue-600'} ${options?.className || ''}`}\n        style={options?.style}\n      >\n        {displayText}\n      </a>\n    )\n  }\n}\n"]}