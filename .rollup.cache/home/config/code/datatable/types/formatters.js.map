{"version":3,"file":"formatters.js","sourceRoot":"","sources":["formatters.ts"],"names":[],"mappings":"","sourcesContent":["\nimport React from 'react'\n\nexport type FormatterType = \n  | 'default'      // Texto simple\n  | 'badge'        // Badge con variantes y colores\n  | 'date'         // Formateo de fechas\n  | 'currency'     // Formateo de moneda\n  | 'percentage'   // Formateo de porcentaje\n  | 'icon'         // Solo icono\n  | 'icon-text'    // Icono + texto\n  | 'custom'       // Formatter personalizado\n  | 'html'         // HTML personalizado\n  | 'link'         // Enlaces\n  | 'image'        // Imágenes\n\nexport interface ColumnFormatter {\n  type: FormatterType\n  options?: {\n    // Para todos los tipos\n    className?: string\n    style?: React.CSSProperties\n    template?: string // ej: \"{value}h\", \"TASK-{value}\"\n    \n    // Para badges\n    variant?: 'default' | 'secondary' | 'destructive' | 'outline'\n    badgeClassName?: string\n    \n    // Para fechas\n    format?: 'short' | 'medium' | 'long' | 'iso' | 'custom' | 'relative'\n    customFormat?: string // ej: 'DD/MM/YYYY'\n    locale?: string\n    \n    // Para currency\n    currency?: string // 'USD', 'EUR', etc.\n    currencyDecimals?: number\n    \n    // Para percentage\n    decimals?: number\n    suffix?: string\n    \n    // Para iconos\n    icon?: string\n    iconPosition?: 'left' | 'right'\n    iconClassName?: string\n    \n    // Para links\n    href?: string | ((value: any, record: any) => string)\n    target?: '_blank' | '_self'\n    linkClassName?: string\n    \n    // Para imágenes\n    width?: number\n    height?: number\n    alt?: string\n    fallbackSrc?: string\n    \n    // Mapping de valores a estilos específicos\n    valueMap?: Record<string, {\n      className?: string\n      style?: React.CSSProperties\n      icon?: string\n      label?: string\n      variant?: string\n    }>\n    \n    // Formateo condicional\n    conditionalFormatting?: ConditionalFormat[]\n  }\n}\n\nexport interface ConditionalFormat {\n  condition: string | ((value: any, record: any) => boolean)\n  className?: string\n  style?: React.CSSProperties\n  formatter?: ColumnFormatter\n}\n\nexport interface FormatterContext {\n  value: any\n  record: any\n  field: ExtendedColumnConfig\n  rowIndex: number\n  columnIndex: number\n}\n\nexport interface FormatterResult {\n  content: React.ReactNode\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport type FormatterFunction = (context: FormatterContext) => FormatterResult\n\nexport interface ExtendedColumnConfig {\n  key: string\n  label: string\n  type?: string\n  sortable?: boolean\n  filterable?: boolean\n  \n  // Configuración de formateo\n  formatter?: ColumnFormatter\n  \n  // Clases CSS para la columna completa\n  columnClassName?: string\n  headerClassName?: string\n  cellClassName?: string\n  \n  // Configuración condicional\n  conditionalFormatting?: ConditionalFormat[]\n}\n\nexport interface FormatterConfig {\n  columns: ExtendedColumnConfig[]\n  globalOptions?: {\n    locale?: string\n    currency?: string\n    dateFormat?: string\n    theme?: 'light' | 'dark'\n  }\n}\n"]}