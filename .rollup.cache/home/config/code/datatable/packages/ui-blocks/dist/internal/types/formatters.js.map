{"version":3,"file":"formatters.js","sourceRoot":"","sources":["../../../src/internal/types/formatters.ts"],"names":[],"mappings":"","sourcesContent":["import React from 'react'\n\nexport type FormatterType = \n  | 'default'\n  | 'badge'\n  | 'date'\n  | 'currency'\n  | 'percentage'\n  | 'icon'\n  | 'icon-text'\n  | 'custom'\n  | 'html'\n  | 'link'\n  | 'image'\n\nexport interface ColumnFormatter {\n  type: FormatterType\n  options?: {\n    className?: string\n    style?: React.CSSProperties\n    template?: string\n    variant?: 'default' | 'secondary' | 'destructive' | 'outline'\n    badgeClassName?: string\n    format?: 'short' | 'medium' | 'long' | 'iso' | 'custom' | 'relative'\n    customFormat?: string\n    locale?: string\n    currency?: string\n    currencyDecimals?: number\n    decimals?: number\n    suffix?: string\n    icon?: string\n    iconPosition?: 'left' | 'right'\n    iconClassName?: string\n    href?: string | ((value: any, record: any) => string)\n    target?: '_blank' | '_self'\n    linkClassName?: string\n    width?: number\n    height?: number\n    alt?: string\n    fallbackSrc?: string\n    valueMap?: Record<string, {\n      className?: string\n      style?: React.CSSProperties\n      icon?: string\n      label?: string\n      variant?: string\n    }>\n    conditionalFormatting?: ConditionalFormat[]\n  }\n}\n\nexport interface ConditionalFormat {\n  condition: string | ((value: any, record: any) => boolean)\n  className?: string\n  style?: React.CSSProperties\n  formatter?: ColumnFormatter\n}\n\nexport interface FormatterContext {\n  value: any\n  record: any\n  field: ExtendedColumnConfig\n  rowIndex: number\n  columnIndex: number\n}\n\nexport interface FormatterResult {\n  content: React.ReactNode\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport type FormatterFunction = (context: FormatterContext) => FormatterResult\n\nexport interface ExtendedColumnConfig {\n  key: string\n  label: string\n  type?: string\n  sortable?: boolean\n  filterable?: boolean\n  formatter?: ColumnFormatter\n  columnClassName?: string\n  headerClassName?: string\n  cellClassName?: string\n  conditionalFormatting?: ConditionalFormat[]\n}\n\nexport interface FormatterConfig {\n  columns: ExtendedColumnConfig[]\n  globalOptions?: {\n    locale?: string\n    currency?: string\n    dateFormat?: string\n    theme?: 'light' | 'dark'\n  }\n}\n"]}