{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../src/formatters/registry.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAA;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAA;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAA;AAC9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAA;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAA;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAA;AACxD,OAAO,EAAE,0BAA0B,EAAE,aAAa,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAA;AAE5F,MAAM,CAAC,MAAM,UAAU,GAA6C;IAClE,OAAO,EAAE,gBAAgB;IACzB,KAAK,EAAE,cAAc;IACrB,IAAI,EAAE,aAAa;IACnB,QAAQ,EAAE,iBAAiB;IAC3B,UAAU,EAAE,mBAAmB;IAC/B,IAAI,EAAE,aAAa;IACnB,WAAW,EAAE,iBAAiB;IAC9B,MAAM,EAAE,eAAe;IACvB,IAAI,EAAE,aAAa;IACnB,IAAI,EAAE,aAAa;IACnB,KAAK,EAAE,cAAc;CACtB,CAAA;AAED,MAAM,UAAU,UAAU,CAAC,OAAyB;IAClD,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAA;IACzB,IAAI,CAAC,KAAK,CAAC,SAAS;QAAE,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAA;IACtD,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;IAClD,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,CAAC,IAAI,CAAC,mBAAmB,KAAK,CAAC,SAAS,CAAC,IAAI,4BAA4B,CAAC,CAAA;QACjF,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAClC,CAAC;IACD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAA;QACnC,OAAO,0BAA0B,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAA;IAC9D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,uBAAuB,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAA;QACjE,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAClC,CAAC;AACH,CAAC;AAED,OAAO,EAAE,aAAa,EAAE,qBAAqB,EAAE,CAAA","sourcesContent":["import { FormatterFunction, FormatterType, FormatterContext, FormatterResult } from '../internal/types/formatters'\nimport { DefaultFormatter } from './types/default-formatter'\nimport { BadgeFormatter } from './types/badge-formatter'\nimport { DateFormatter } from './types/date-formatter'\nimport { CurrencyFormatter } from './types/currency-formatter'\nimport { PercentageFormatter } from './types/percentage-formatter'\nimport { IconFormatter } from './types/icon-formatter'\nimport { IconTextFormatter } from './types/icon-text-formatter'\nimport { CustomFormatter } from './types/custom-formatter'\nimport { HtmlFormatter } from './types/html-formatter'\nimport { LinkFormatter } from './types/link-formatter'\nimport { ImageFormatter } from './types/image-formatter'\nimport { applyConditionalFormatting, applyTemplate, createCustomFormatter } from './helpers'\n\nexport const FORMATTERS: Record<FormatterType, FormatterFunction> = {\n  default: DefaultFormatter,\n  badge: BadgeFormatter,\n  date: DateFormatter,\n  currency: CurrencyFormatter,\n  percentage: PercentageFormatter,\n  icon: IconFormatter,\n  'icon-text': IconTextFormatter,\n  custom: CustomFormatter,\n  html: HtmlFormatter,\n  link: LinkFormatter,\n  image: ImageFormatter,\n}\n\nexport function formatCell(context: FormatterContext): FormatterResult {\n  const { field } = context\n  if (!field.formatter) return DefaultFormatter(context)\n  const formatter = FORMATTERS[field.formatter.type]\n  if (!formatter) {\n    console.warn(`Formatter type '${field.formatter.type}' not found, using default`)\n    return DefaultFormatter(context)\n  }\n  try {\n    const result = formatter(context)\n  return applyConditionalFormatting(context, result, formatCell)\n  } catch (e) {\n    console.error(`Error in formatter '${field.formatter.type}':`, e)\n    return DefaultFormatter(context)\n  }\n}\n\nexport { applyTemplate, createCustomFormatter }\nexport type { FormatterFunction, FormatterContext, FormatterResult, FormatterType } from '../internal/types/formatters'\n"]}